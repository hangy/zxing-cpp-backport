name: Backport zxing-cpp (salsa container)

on:
  workflow_dispatch:
    inputs:
      python_bindings:
        description: "Build Python bindings?"
        type: choice
        options: [on, off]
        default: on
      from_suite:
        description: "Source suite to pull from"
        type: choice
        options: [trixie, unstable]
        default: trixie
      sign_release:
        description: "Sign .dsc/.changes and APT repo?"
        type: choice
        options: [yes, no]
        default: yes
  push:
    tags:
      - "v*.*.*"
    branches: [ main ]
    paths:
      - "debian/**"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PKG: zxing-cpp
  FROM_SUITE: "${{ github.event_name == 'workflow_dispatch' && inputs.from_suite || 'trixie' }}"
  PYBIND:     "${{ github.event_name == 'workflow_dispatch' && inputs.python_bindings || 'on' }}"
  SIGN_RELEASE: "${{ github.event_name == 'workflow_dispatch' && inputs.sign_release || 'yes' }}"

jobs:
  build:
    # NOTE: This runs on amd64 only (host arch). Multi-arch would require separate arm64 runners.
    runs-on: ubuntu-latest
    container:
      image: debian:${{ matrix.suite }}-slim
    strategy:
      fail-fast: false
      matrix:
        suite: [bullseye, bookworm]
    env:
      # backport suffixes
      BPO11: "~bpo11+"
      BPO12: "~bpo12+"
      # maintainer identity for dch
      DEBFULLNAME: CI Backporter
      DEBEMAIL: ${{ github.actor }}@users.noreply.github.com
    steps:
      - name: Show container info
        run: |
          set -e
          lsb_release -a || true
          uname -a
          dpkg -l | grep -E 'debian-archive-keyring|devscripts' || true

      - name: Configure apt (suite + backports; Deb822)
        env:
          SUITE: ${{ matrix.suite }}
        shell: bash
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates debian-archive-keyring gnupg
          install -d /etc/apt/sources.list.d /etc/apt/preferences.d
          cat > /etc/apt/sources.list.d/debian.sources <<EOF
          Types: deb deb-src
          URIs: http://deb.debian.org/debian
          Suites: ${SUITE}
          Components: main
          Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg

          Types: deb deb-src
          URIs: http://deb.debian.org/debian
          Suites: ${SUITE}-backports
          Components: main
          Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg
          EOF

          # Backports: only if needed (priority 100)
          cat > /etc/apt/preferences.d/99-backports <<EOF
          Package: *
          Pin: release n=${SUITE}-backports
          Pin-Priority: 100
          EOF

          apt-get update

      - name: Install build helpers
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get -y dist-upgrade
          apt-get install -y --no-install-recommends \
            devscripts equivs fakeroot build-essential \
            dh-python quilt git python3-all

      - name: Fetch source from ${{ env.FROM_SUITE }} (just sources)
        env:
          PKG: zxing-cpp
          FROM_SUITE: ${{ env.FROM_SUITE }}
        shell: bash
        run: |
          set -e
          # Temporarily add ${FROM_SUITE} deb-src to pull only the source
          cat > /etc/apt/sources.list.d/${FROM_SUITE}.sources <<EOF
          Types: deb-src
          URIs: http://deb.debian.org/debian
          Suites: ${FROM_SUITE}
          Components: main
          Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg
          EOF
          apt-get update
          apt source -t ${FROM_SUITE} "${PKG}"
          rm -f /etc/apt/sources.list.d/${FROM_SUITE}.sources
          apt-get update

      - name: Backport changelog + (optionally) disable pybind
        env:
          PKG: zxing-cpp
          SUITE: ${{ matrix.suite }}
        run: |
          set -e
          cd ${PKG}-*
          dch --bpo --distribution "${SUITE}" "Automated backport to ${SUITE}."

      - name: Install build-deps from ${SUITE} (+ backports if needed)
        env:
          PKG: zxing-cpp
          SUITE: ${{ matrix.suite }}
        shell: bash
        run: |
          set -e
          cd ${PKG}-*
          # Prefer $SUITE; resolver may pick backports only if strictly needed
          mk-build-deps --install --remove --tool \
            "apt-get -y -o APT::Default-Release=${SUITE} --no-install-recommends"

      - name: Build
        env:
          PKG: zxing-cpp
        shell: bash
        run: |
          set -e
          cd ${PKG}-*
          dpkg-buildpackage -us -uc

      - name: Collect & upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG }}-${{ matrix.suite }}-amd64-${{ github.sha }}
          path: |
            ./*.deb
            ./*.ddeb
            ./*~bpo*.changes
            ./*~bpo*.buildinfo
            ./*~bpo*.dsc
            ./*~bpo*.tar.*
            ./*.orig.tar.*
          if-no-files-found: error

  repo:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: registry.salsa.debian.org/salsa-ci-team/pipeline/build:latest
    env:
      DEBIAN_FRONTEND: noninteractive
      PKG: zxing-cpp
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GPG_KEYID: ${{ secrets.GPG_KEYID }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
  
      # The Salsa image already has gnupg; we only add reprepro.
      - name: Install minimal deps
        run: |
          apt-get update
          apt-get install -y --no-install-recommends reprepro ca-certificates
  
      - name: Prepare signing key (optional)
        run: |
          set -e
          wants_sign() {
            val="$(printf '%s' "${SIGN_RELEASE:-}" | tr '[:upper:]' '[:lower:]')"
            case "$val" in yes|true|on|1) return 0;; *) return 1;; esac
          }
          if ! wants_sign || [ -z "${GPG_PRIVATE_KEY:-}" ]; then
            echo "Signing disabled or no GPG key provided. Skipping key import."
            exit 0
          fi
      
          export GNUPGHOME="$HOME/.gnupg"
          install -d -m 700 "$GNUPGHOME"
          {
            echo "pinentry-mode loopback"
            echo "no-tty"
            [ -n "${GPG_KEYID:-}" ] && echo "default-key ${GPG_KEYID}"
          } >> "$GNUPGHOME/gpg.conf"
          echo "allow-loopback-pinentry" >> "$GNUPGHOME/gpg-agent.conf"
          gpgconf --reload gpg-agent || true
      
          # Import (supports secrets with \n)
          printf '%b' "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          gpg --batch --list-secret-keys || true
      
          # Warm up agent
          if [ -n "${GPG_PASSPHRASE:-}" ]; then
            echo "warmup" | gpg --batch --yes --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" -abs > /dev/null
          fi

  
      - name: Build APT repository (latest & snapshots)
        shell: bash
        run: |
          set -e
          REPO=repo
          mkdir -p "$REPO/conf"
          if gpg --batch --list-keys >/dev/null 2>&1; then
            SIGN_LINE="SignWith: default"
            [ -n "${GPG_KEYID:-}" ] && SIGN_LINE="SignWith: ${GPG_KEYID}"
          else
            SIGN_LINE=""
          fi
  
          cat > "$REPO/conf/distributions" <<EOF
          Codename: bullseye
          Components: main
          Architectures: amd64 arm64 source
          ${SIGN_LINE}
  
          Codename: bookworm
          Components: main
          Architectures: amd64 arm64 source
          ${SIGN_LINE}
          EOF
  
          shopt -s nullglob globstar
  
          # Include per-suite binaries, ddebs (if any) and full source
          for suite in bullseye bookworm; do
            for deb in dist/**/**/*.deb; do
              case "$deb" in
                *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$deb" || true ;;
              esac
            done
          
            # DDEBs (if you generate them)
            for ddeb in dist/**/**/*.ddeb; do
              case "$ddeb" in
                *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$ddeb" || true ;;
              esac
            done
          
            # Sources (.dsc) â€” requires the .orig/.debian tarballs to be present next to the .dsc
            for dsc in dist/**/**/*.dsc; do
              case "$dsc" in
                *-${suite}-*) reprepro -b "$REPO" includedsc "$suite" "$dsc" || true ;;
              esac
            done
          done
  
          tar -C "$REPO" -czf repo.tar.gz .
  
      - name: Upload APT repo artifact
        uses: actions/upload-artifact@v4
        with:
          name: apt-repo
          path: |
            repo/**
            repo.tar.gz
          if-no-files-found: error
  
      - name: Upload repo for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo

  deploy-pages:
    needs: repo
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    needs: [build, repo]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Collect files for release
        run: |
          mkdir out
          find dist -type f -name "*.deb" -exec cp -v {} out/ \;
          find dist -type f -name "*.ddeb" -exec cp -v {} out/ \;
          find dist -type f -name "*.changes" -exec cp -v {} out/ \;
          find dist -type f -name "*.buildinfo" -exec cp -v {} out/ \;
          find dist -type f -name "*.dsc" -exec cp -v {} out/ \;
          find dist -type f -name "*.tar.*" -exec cp -v {} out/ \;
          if [ -f dist/apt-repo/repo.tar.gz ]; then
            cp -v dist/apt-repo/repo.tar.gz out/
          fi
          if [ -f dist/apt-repo/repo/keys/repo.asc ]; then
            cp -v dist/apt-repo/repo/keys/repo.asc out/
          fi

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: out/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag backport counters per suite
        env:
          PKG: zxing-cpp
        run: |
          set -e
          mapfile -t DSCS < <(find dist -type f -name "${PKG}_*.dsc")
          for dsc in "${DSCS[@]}"; do
            VER=$(basename "$dsc" | sed -E 's/.*_([^_]+)\.dsc/\1/')
            SUITE_TAG=""
            echo "$VER" | grep -q "~bpo11+" && SUITE_TAG="bullseye"
            echo "$VER" | grep -q "~bpo12+" && SUITE_TAG="bookworm"
            [ -n "$SUITE_TAG" ] || continue
            BASE=$(echo "$VER" | sed -E 's/~bpo(11|12)\+[0-9]+$//')
            X=$(echo "$VER"   | sed -nE 's/.*~bpo(11|12)\+([0-9]+)$/\2/p')
            [ -n "$BASE" ] && [ -n "$X" ] || continue
            TAG="backport/${SUITE_TAG}/${BASE}/${X}"
            if ! git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
              git tag -a "${TAG}" -m "Backport ${BASE} ${SUITE_TAG} ~bpo ${X}"
              git push origin "${TAG}"
            fi
          done
