name: Backport zxing-cpp (multi-arch + repo + release + auto-bpo)

on:
  workflow_dispatch:
    inputs:
      python_bindings:
        description: "Build Python bindings?"
        type: choice
        options: [on, off]
        default: on
      from_suite:
        description: "Source suite to pull from"
        type: choice
        options: [trixie, unstable]
        default: trixie
      sign_release:
        description: "Sign .dsc/.changes and APT repo?"
        type: choice
        options: [yes, no]
        default: yes
  push:
    tags:
      - "v*.*.*"
    branches: [main]
    paths:
      - "debian/**"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PKG: zxing-cpp
  FROM_SUITE: "${{ github.event_name == 'workflow_dispatch' && inputs.from_suite || 'trixie' }}"
  PYBIND: "${{ github.event_name == 'workflow_dispatch' && inputs.python_bindings || 'on' }}"
  SIGN_RELEASE: "${{ github.event_name == 'workflow_dispatch' && inputs.sign_release || 'yes' }}"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        suite: [bullseye, bookworm]
        arch: [amd64, arm64]
    env:
      BPO11: "~bpo11+"
      BPO12: "~bpo12+"
      DEBFULLNAME: CI Backporter
      DEBEMAIL: ${{ github.actor }}@users.noreply.github.com
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Needed only for arm64 builds on amd64 runners
      - name: Enable QEMU for arm64
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build inside Salsa CI image
        env:
          SUITE: ${{ matrix.suite }}
          ARCH: ${{ matrix.arch }}
          FROM_SUITE: ${{ env.FROM_SUITE }}
          PKG: ${{ env.PKG }}
          PYBIND: ${{ env.PYBIND }}
          BPO11: ${{ env.BPO11 }}
          BPO12: ${{ env.BPO12 }}
          DEBFULLNAME: ${{ env.DEBFULLNAME }}
          DEBEMAIL: ${{ env.DEBEMAIL }}
        run: |
          set -euo pipefail

          # Use suite-tagged Salsa image (amd64). QEMU on host lets us run arm64 chroot payload.
          IMG="registry.salsa.debian.org/salsa-ci-team/pipeline:${SUITE}"

          # Run everything in one privileged container so host stays clean.
          docker run --rm --privileged \
            -e SUITE -e ARCH -e FROM_SUITE -e PKG -e PYBIND -e BPO11 -e BPO12 \
            -e DEBFULLNAME -e DEBEMAIL \
            -v "$(pwd):/work" -w /work \
            "$IMG" bash -euc '
              set -euo pipefail

              apt-get update
              # Ensure required tools regardless of exact image content
              apt-get install -y --no-install-recommends \
                git devscripts ca-certificates gnupg \
                sbuild mmdebstrap apt-transport-https

              # 1) Add Debian source for FROM_SUITE (Deb822), fetch upstream source
              mkdir -p /etc/apt/sources.list.d
              cat > /etc/apt/sources.list.d/debian.sources <<EOF
              Types: deb-src
              URIs: http://deb.debian.org/debian
              Suites: ${FROM_SUITE}
              Components: main
              EOF
              apt-get update
              apt source -t "${FROM_SUITE}" "${PKG}"

              # 2) Enter extracted source tree
              SRC_DIR="$(echo ${PKG}-*)"
              cd "$SRC_DIR"

              # Base version (strip any existing ~bpo*)
              BASE_VER="$(dpkg-parsechangelog -S Version | sed -E "s/~bpo(11|12)\+[0-9]+$//")"

              # Backport suffix & suite tag
              case "${SUITE}" in
                bullseye) BPO="${BPO11}"; SUITE_TAG="bullseye";;
                bookworm) BPO="${BPO12}"; SUITE_TAG="bookworm";;
                *) echo "Unsupported suite: ${SUITE}" >&2; exit 1;;
              esac

              # Determine next backport counter X from tags backport/<suite>/<BASE_VER>/<X>
              NEXT=1
              if git tag -l "backport/${SUITE_TAG}/${BASE_VER}/*" | grep -q .; then
                X="$(git tag -l "backport/${SUITE_TAG}/${BASE_VER}/*" | sed -E "s#.*/([0-9]+)$#\\1#" | sort -n | tail -n1)"
                NEXT="$((X + 1))"
              fi

              NEW_VER="${BASE_VER}${BPO}${NEXT}"
              echo "Using backport version: ${NEW_VER}"

              # 3) Update changelog; optionally disable Python bindings
              dch -b --force-bad-version --no-auto-nmu \
                  --newversion "${NEW_VER}" --distribution "${SUITE}" \
                  "Automated backport to ${SUITE} (CI bump to ${NEW_VER})."

              if [ "${PYBIND}" = "off" ]; then
                echo '"'"'export DEB_CMAKE_EXTRA_FLAGS += -DZXING_BUILD_PYTHON=OFF'"'"' >> debian/rules
                dch -a "CI: disable Python bindings for ${SUITE} build."
              fi

              debian/rules clean || true

              # 4) Build source package (.dsc)
              dpkg-buildpackage -S -us -uc -d
              cd ..

              # 5) Prepare minimal chroot (unshare mode) and enable backports for bullseye
              CHROOT="/srv/chroot/${SUITE}-${ARCH}-unshare"
              mmdebstrap --architectures="${ARCH}" "${SUITE}" "${CHROOT}" http://deb.debian.org/debian

              if [ "${SUITE}" = "bullseye" ]; then
                mkdir -p "${CHROOT}/etc/apt/sources.list.d" "${CHROOT}/etc/apt/preferences.d"
                {
                  echo "Types: deb"
                  echo "URIs: http://deb.debian.org/debian"
                  echo "Suites: bullseye-backports"
                  echo "Components: main"
                } > "${CHROOT}/etc/apt/sources.list.d/bullseye-backports.sources"
                printf "%s\n" \
                  "Package: *" \
                  "Pin: release n=bullseye-backports" \
                  "Pin-Priority: 100" > "${CHROOT}/etc/apt/preferences.d/99-backports"
                chroot "${CHROOT}" apt-get update
              fi

              # 6) Find .dsc and run sbuild inside the container (unshare mode)
              shopt -s nullglob
              DSC=(./${PKG}_*~bpo*.dsc)
              if [ ${#DSC[@]} -eq 0 ]; then DSC=(./${PKG}_*.dsc); fi
              test ${#DSC[@]} -ge 1
              echo "Using DSC: ${DSC[0]}"

              sbuild \
                --chroot-mode=unshare \
                --chroot="${CHROOT}" \
                --arch="${ARCH}" \
                --dist="${SUITE}" \
                --no-clean-source \
                "${DSC[0]}"
            '

      - name: Import GPG key (optional)
        env:
          SIGN_RELEASE: ${{ env.SIGN_RELEASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          if [ "$SIGN_RELEASE" != "yes" ] || [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "Signing disabled or no GPG key provided. Skipping import."
            exit 0
          fi
          set -e
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback"       >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry"      >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent
          gpg --list-keys

      - name: Debsign artifacts (optional)
        env:
          SIGN_RELEASE: ${{ env.SIGN_RELEASE }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEYID: ${{ secrets.GPG_KEYID }}
          PKG: ${{ env.PKG }}
          ARCH: ${{ matrix.arch }}
        run: |
          if [ "$SIGN_RELEASE" != "yes" ] || [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "Signing disabled or no GPG key provided. Skipping debsign."
            exit 0
          fi
          set -euo pipefail
          shopt -s nullglob
          CHG=(./${PKG}_*_${ARCH}.changes)
          DSC=(./${PKG}_*.dsc)

          # Sign .changes and .dsc (re-sign if already present)
          for f in "${CHG[@]}" "${DSC[@]}"; do
            [ -e "$f" ] || continue
            if [ -n "${GPG_KEYID:-}" ]; then
              debsign -k"${GPG_KEYID}" --re-sign --no-conf \
                -p"gpg --batch --yes --pinentry-mode loopback --passphrase '${GPG_PASSPHRASE}'" "$f"
            else
              debsign --re-sign --no-conf \
                -p"gpg --batch --yes --pinentry-mode loopback --passphrase '${GPG_PASSPHRASE}'" "$f"
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG }}-${{ matrix.suite }}-${{ matrix.arch }}-${{ github.sha }}
          path: |
            ./*.deb
            ./*.ddeb
            ./*.changes
            ./*.buildinfo
            ./*.dsc
            ./*.tar.*
          if-no-files-found: error

  repo:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Install reprepro & gpg
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends reprepro gnupg

      - name: Prepare signing key (optional)
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          SIGN_RELEASE: ${{ env.SIGN_RELEASE }}
        run: |
          if [ "$SIGN_RELEASE" != "yes" ] || [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "Signing disabled or no GPG key provided. Skipping repo key import."
            exit 0
          fi
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpg --list-keys

      - name: Build APT repository (latest & snapshots)
        shell: bash
        env:
          PKG: zxing-cpp
          SIGN_RELEASE: ${{ env.SIGN_RELEASE }}
        run: |
          set -e
          REPO=repo
          mkdir -p "$REPO/conf"
          cat > "$REPO/conf/distributions" <<'EOF'
          Codename: bullseye
          Components: main
          Architectures: amd64 arm64 source
          SignWith: default

          Codename: bookworm
          Components: main
          Architectures: amd64 arm64 source
          SignWith: default
          EOF

          shopt -s nullglob globstar
          for suite in bullseye bookworm; do
            for deb in dist/**/${PKG}_*_*.deb; do
              case "$deb" in
                *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$deb" || true ;;
              esac
            done
            for ddeb in dist/**/${PKG}_*_*.ddeb; do
              case "$ddeb" in
                *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$ddeb" || true ;;
              esac
            done
            for dsc in dist/**/${PKG}_*.dsc; do
              case "$dsc" in
                *-${suite}-*) reprepro -b "$REPO" includedsc "$suite" "$dsc" || true ;;
              esac
            done
          done

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
            for suite in bullseye bookworm; do
              SNAP_SUITE="${suite}-${TAG}"
              if ! grep -q "Codename: ${SNAP_SUITE}" "$REPO/conf/distributions"; then
                cat >> "$REPO/conf/distributions" <<EOF
                Codename: ${SNAP_SUITE}
                Components: main
                Architectures: amd64 arm64 source
                SignWith: default
                EOF
              fi
              reprepro -b "$REPO" createsymlinks
              for pkg in ${PKG} ${PKG}-tools libzxing3 libzxing-dev python3-zxing-cpp; do
                reprepro -b "$REPO" copypackages "$SNAP_SUITE" "$suite" "$pkg" || true
                reprepro -b "$REPO" copysrc      "$SNAP_SUITE" "$suite" "$pkg" || true
              done
            done
          fi

          mkdir -p "$REPO/keys"
          if gpg --batch --list-keys >/dev/null 2>&1; then
            gpg --batch --export -a > "$REPO/keys/repo.asc" || true
          fi

          tar -C "$REPO" -czf repo.tar.gz .

      - name: Upload APT repo artifact
        uses: actions/upload-artifact@v4
        with:
          name: apt-repo
          path: |
            repo/**
            repo.tar.gz
          if-no-files-found: error

      - name: Upload repo for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo

  deploy-pages:
    needs: repo
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    needs: [build, repo]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Collect files for release
        run: |
          mkdir out
          find dist -type f -name "*.deb"       -exec cp -v {} out/ \;
          find dist -type f -name "*.ddeb"      -exec cp -v {} out/ \;
          find dist -type f -name "*.changes"   -exec cp -v {} out/ \;
          find dist -type f -name "*.buildinfo" -exec cp -v {} out/ \;
          find dist -type f -name "*.dsc"       -exec cp -v {} out/ \;
          find dist -type f -name "*.tar.*"     -exec cp -v {} out/ \;
          if [ -f dist/apt-repo/repo.tar.gz ]; then cp -v dist/apt-repo/repo.tar.gz out/; fi
          if [ -f dist/apt-repo/repo/keys/repo.asc ]; then cp -v dist/apt-repo/repo/keys/repo.asc out/; fi

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: out/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag backport counters per suite
        shell: bash
        env:
          PKG: zxing-cpp
        run: |
          set -e
          mapfile -t DSCS < <(find dist -type f -name "${PKG}_*.dsc")
          for dsc in "${DSCS[@]}"; do
            VER=$(basename "$dsc" | sed -E "s/.*_([^_]+)\.dsc/\1/")
            SUITE_TAG=""
            echo "$VER" | grep -q "~bpo11+" && SUITE_TAG="bullseye"
            echo "$VER" | grep -q "~bpo12+" && SUITE_TAG="bookworm"
            [ -n "$SUITE_TAG" ] || continue

            BASE=$(echo "$VER" | sed -E "s/~bpo(11|12)\+[0-9]+$//")
            X=$(echo "$VER"   | sed -nE "s/.*~bpo(11|12)\+([0-9]+)$/\2/p")
            [ -n "$BASE" ] && [ -n "$X" ] || continue

            TAG="backport/${SUITE_TAG}/${BASE}/${X}"
            if ! git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
              git tag -a "${TAG}" -m "Backport ${BASE} ${SUITE_TAG} ~bpo ${X}"
              git push origin "${TAG}"
            fi
          done
