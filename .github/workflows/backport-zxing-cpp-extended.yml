name: Backport zxing-cpp (salsa container)

on:
  workflow_dispatch:
    inputs:
      python_bindings:
        description: "Build Python bindings?"
        type: choice
        options: [on, off]
        default: on
      from_suite:
        description: "Source suite to pull from"
        type: choice
        options: [trixie, unstable]
        default: trixie
      sign_release:
        description: "Sign .dsc/.changes and APT repo?"
        type: choice
        options: [yes, no]
        default: yes
  push:
    tags:
      - "v*.*.*"
    branches: [ main ]
    paths:
      - "debian/**"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PKG: zxing-cpp
  FROM_SUITE: "${{ github.event_name == 'workflow_dispatch' && inputs.from_suite || 'trixie' }}"
  PYBIND:     "${{ github.event_name == 'workflow_dispatch' && inputs.python_bindings || 'on' }}"
  SIGN_RELEASE: "${{ github.event_name == 'workflow_dispatch' && inputs.sign_release || 'yes' }}"

jobs:
  build:
    # NOTE: This runs on amd64 only (host arch). Multi-arch would require separate arm64 runners.
    runs-on: ubuntu-latest
    container:
      image: registry.salsa.debian.org/salsa-ci-team/pipeline/build:latest
    strategy:
      fail-fast: false
      matrix:
        suite: [bullseye, bookworm]
    env:
      # backport suffixes
      BPO11: "~bpo11+"
      BPO12: "~bpo12+"
      # maintainer identity for dch
      DEBFULLNAME: CI Backporter
      DEBEMAIL: ${{ github.actor }}@users.noreply.github.com
    steps:
      - name: Show container info
        run: |
          set -e
          lsb_release -a || true
          uname -a
          dpkg -l | grep -E 'debian-archive-keyring|devscripts' || true

      - name: Configure deb-src for ${FROM_SUITE}
        env:
          FROM_SUITE: ${{ env.FROM_SUITE }}
        run: |
          set -euo pipefail
          # Deb822 source for *source* packages from FROM_SUITE (trixie/unstable)
          install -d -m 0755 /etc/apt/sources.list.d
          printf '%s\n' \
            "Types: deb-src" \
            "URIs: http://deb.debian.org/debian/" \
            "Suites: ${FROM_SUITE}" \
            "Components: main" \
            "Signed-By: /usr/share/keyrings/debian-archive-keyring.gpg" \
            > /etc/apt/sources.list.d/${FROM_SUITE}.sources
          apt-get update

      - name: Upgrade base & install build helpers
        run: |
          set -e
          export DEBIAN_FRONTEND=noninteractive
          apt-get -y dist-upgrade
          apt-get install -y --no-install-recommends \
            debian-keyring devscripts equivs fakeroot ca-certificates \
            git quilt python3-all python3-pip

      - name: Fetch ${PKG} source from ${FROM_SUITE}
        env:
          FROM_SUITE: ${{ env.FROM_SUITE }}
          PKG: ${{ env.PKG }}
        run: |
          set -e
          # Prefer explicit -t <suite> (works the same as pkg/suite)
          apt-get update
          apt source -t "${FROM_SUITE}" "${PKG}"

      - name: Prepare backport changelog + toggle Python bindings
        env:
          PKG: ${{ env.PKG }}
          PYBIND: ${{ env.PYBIND }}
          SUITE: ${{ matrix.suite }}
          BPO11: ${{ env.BPO11 }}
          BPO12: ${{ env.BPO12 }}
        run: |
          set -euo pipefail
          cd "${PKG}-"*
          BASE_VER="$(dpkg-parsechangelog -S Version | sed -E 's/~bpo(11|12)\+[0-9]+$//')"

          case "${SUITE}" in
            bullseye) BPO="${BPO11}" ;;
            bookworm) BPO="${BPO12}" ;;
            *) echo "Unsupported target suite: ${SUITE}" >&2; exit 1 ;;
          esac

          # Autoincrement bpo counter locally
          X=1
          while grep -q "^${PKG} (${BASE_VER}${BPO}${X})" debian/changelog 2>/dev/null; do
            X=$((X+1))
          done
          NEW_VER="${BASE_VER}${BPO}${X}"

          dch -b --force-bad-version --no-auto-nmu \
            --newversion "${NEW_VER}" \
            --distribution "${SUITE}" \
            "Automated backport to ${SUITE}."

          # Optionally disable python bindings at build time
          if [ "${PYBIND}" = "off" ]; then
            echo 'export DEB_CMAKE_EXTRA_FLAGS += -DZXING_BUILD_PYTHON=OFF' >> debian/rules
            dch -a "CI: disable Python bindings for ${SUITE} build."
          fi

      - name: Install build-deps
        env:
          PKG: ${{ env.PKG }}
        run: |
          set -euo pipefail
          cd "${PKG}-"*
          # Use mk-build-deps (equivs) with a predictable solver call
          mk-build-deps --install --remove --tool \
            'apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends'

      - name: Build (source + binary)
        env:
          PKG: ${{ env.PKG }}
        run: |
          set -euo pipefail
          cd "${PKG}-"*
          # Build both source and binaries, unsigned (you sign later if desired)
          dpkg-buildpackage -us -uc

      - name: Collect & upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG }}-${{ matrix.suite }}-amd64-${{ github.sha }}
          path: |
            ./*.deb
            ./*.ddeb
            ./*~bpo*.changes
            ./*~bpo*.buildinfo
            ./*~bpo*.dsc
            ./*~bpo*.tar.*
          if-no-files-found: error

  repo:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: registry.salsa.debian.org/salsa-ci-team/pipeline/build:latest
    env:
      DEBIAN_FRONTEND: noninteractive
      PKG: zxing-cpp
      SIGN_RELEASE: ${{ env.SIGN_RELEASE }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      GPG_KEYID: ${{ secrets.GPG_KEYID }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist
  
      # The Salsa image already has gnupg; we only add reprepro.
      - name: Install minimal deps
        run: |
          apt-get update
          apt-get install -y --no-install-recommends reprepro ca-certificates
  
      - name: Prepare signing key (optional)
        run: |
          set -e
          wants_sign() { case "${SIGN_RELEASE,,}" in yes|true|on|1) return 0;; *) return 1;; esac; }
          if ! wants_sign || [ -z "${GPG_PRIVATE_KEY:-}" ]; then
            echo "Signing disabled or no GPG key provided. Skipping key import."
            exit 0
          fi
  
          export GNUPGHOME="$HOME/.gnupg"
          install -d -m 700 "$GNUPGHOME"
          {
            echo "pinentry-mode loopback"
            echo "no-tty"
            [ -n "${GPG_KEYID:-}" ] && echo "default-key ${GPG_KEYID}"
          } >> "$GNUPGHOME/gpg.conf"
          echo "allow-loopback-pinentry" >> "$GNUPGHOME/gpg-agent.conf"
          gpgconf --reload gpg-agent || true
  
          # Import (supports secrets with \n escapes)
          printf '%b' "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
          gpg --batch --list-secret-keys || true
  
          # Warm up agent for non-interactive signing
          if [ -n "${GPG_PASSPHRASE:-}" ]; then
            echo "warmup" | gpg --batch --yes --pinentry-mode loopback \
              --passphrase "$GPG_PASSPHRASE" -abs > /dev/null
          fi
  
      - name: Build APT repository (latest & snapshots)
        shell: bash
        run: |
          set -e
          REPO=repo
          mkdir -p "$REPO/conf"
          if gpg --batch --list-keys >/dev/null 2>&1; then
            SIGN_LINE="SignWith: default"
            [ -n "${GPG_KEYID:-}" ] && SIGN_LINE="SignWith: ${GPG_KEYID}"
          else
            SIGN_LINE=""
          fi
  
          cat > "$REPO/conf/distributions" <<EOF
          Codename: bullseye
          Components: main
          Architectures: amd64 arm64 source
          ${SIGN_LINE}
  
          Codename: bookworm
          Components: main
          Architectures: amd64 arm64 source
          ${SIGN_LINE}
          EOF
  
          shopt -s nullglob globstar
  
          # Include per-suite binaries, ddebs (if any) and source
          for suite in bullseye bookworm; do
            for deb in dist/**/${PKG}_*_*.deb; do
              case "$deb" in *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$deb" || true ;; esac
            done
            for ddeb in dist/**/${PKG}_*_*.ddeb; do
              case "$ddeb" in *-${suite}-*) reprepro -b "$REPO" includedeb "$suite" "$ddeb" || true ;; esac
            done
            for dsc in dist/**/${PKG}_*.dsc; do
              case "$dsc" in *-${suite}-*) reprepro -b "$REPO" includedsc "$suite" "$dsc" || true ;; esac
            done
          done
  
          # Export the repo signing pubkey if available
          mkdir -p "$REPO/keys"
          if gpg --batch --list-keys >/dev/null 2>&1; then
            gpg --batch --export -a ${GPG_KEYID:+$GPG_KEYID} > "$REPO/keys/repo.asc" || true
          fi
  
          tar -C "$REPO" -czf repo.tar.gz .
  
      - name: Upload APT repo artifact
        uses: actions/upload-artifact@v4
        with:
          name: apt-repo
          path: |
            repo/**
            repo.tar.gz
          if-no-files-found: error
  
      - name: Upload repo for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: repo

  deploy-pages:
    needs: repo
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  release:
    needs: [build, repo]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Collect files for release
        run: |
          mkdir out
          find dist -type f -name "*.deb" -exec cp -v {} out/ \;
          find dist -type f -name "*.ddeb" -exec cp -v {} out/ \;
          find dist -type f -name "*.changes" -exec cp -v {} out/ \;
          find dist -type f -name "*.buildinfo" -exec cp -v {} out/ \;
          find dist -type f -name "*.dsc" -exec cp -v {} out/ \;
          find dist -type f -name "*.tar.*" -exec cp -v {} out/ \;
          if [ -f dist/apt-repo/repo.tar.gz ]; then
            cp -v dist/apt-repo/repo.tar.gz out/
          fi
          if [ -f dist/apt-repo/repo/keys/repo.asc ]; then
            cp -v dist/apt-repo/repo/keys/repo.asc out/
          fi

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: out/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag backport counters per suite
        env:
          PKG: zxing-cpp
        run: |
          set -e
          mapfile -t DSCS < <(find dist -type f -name "${PKG}_*.dsc")
          for dsc in "${DSCS[@]}"; do
            VER=$(basename "$dsc" | sed -E 's/.*_([^_]+)\.dsc/\1/')
            SUITE_TAG=""
            echo "$VER" | grep -q "~bpo11+" && SUITE_TAG="bullseye"
            echo "$VER" | grep -q "~bpo12+" && SUITE_TAG="bookworm"
            [ -n "$SUITE_TAG" ] || continue
            BASE=$(echo "$VER" | sed -E 's/~bpo(11|12)\+[0-9]+$//')
            X=$(echo "$VER"   | sed -nE 's/.*~bpo(11|12)\+([0-9]+)$/\2/p')
            [ -n "$BASE" ] && [ -n "$X" ] || continue
            TAG="backport/${SUITE_TAG}/${BASE}/${X}"
            if ! git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
              git tag -a "${TAG}" -m "Backport ${BASE} ${SUITE_TAG} ~bpo ${X}"
              git push origin "${TAG}"
            fi
          done
